document.addEventListener("DOMContentLoaded", () => {
  const quizQuestions = document.getElementById("quiz-questions");
  let correctAnswersCount = 0;
  const totalQuestions = quizQuestions.children.length;
  let incorrectAnswersExist = false;

  const quizObserver = new IntersectionObserver(
    (entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          quizQuestions.style.opacity = "1";
          document.querySelectorAll(".question").forEach((q, index) => {
            setTimeout(() => {
              q.classList.add("show");
            }, index * 300);
          });
          observer.unobserve(entry.target);
        }
      });
    },
    { threshold: 0.1 }
  );
  quizObserver.observe(quizQuestions);

  quizQuestions.querySelectorAll(".option").forEach(button => {
    button.addEventListener("click", e => {
      const questionDiv = e.target.closest(".question");
      if (questionDiv.dataset.answered) {
        return;
      }

      questionDiv.dataset.answered = "true";
      const isCorrect = e.target.dataset.answer === "true";

      e.target.style.transform = "scale(1.1)";
      e.target.style.transition = "transform 0.2s ease-out";

      setTimeout(() => {
        if (isCorrect) {
          e.target.style.backgroundColor = "green";
          correctAnswersCount++;
        } else {
          e.target.style.backgroundColor = "red";
          incorrectAnswersExist = true;
          const correctButton = questionDiv.querySelector('[data-answer="true"]');
          if (correctButton) {
            correctButton.style.backgroundColor = "green";
          }
        }

        if (quizQuestions.querySelectorAll('[data-answered="true"]').length === totalQuestions) {
          if (incorrectAnswersExist) {
            setTimeout(showThanos, 1500);
          } else {
            setTimeout(showVisionSection, 1500);
          }
        }
      }, 200);
    });
  });

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–µ–∫—Ü—ñ—ó –í—ñ–∂–µ–Ω–∞
  function showVisionSection() {
    const mainSection = document.querySelector("main");
    const visionSection = document.createElement("section");
    visionSection.id = "vision-section";
    visionSection.classList.add("vision-section", "hidden");

    const userName = localStorage.getItem("userName");
    const userTeam = localStorage.getItem("userTeam");
    const isMaleTeam = localStorage.getItem("isMaleTeam") === "true";

    // –ù–æ–≤–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–∏–∫–º–µ—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥–∏
    const teamAdjectiveMap = {
      "–ö–∞–ø—ñ—Ç–∞–Ω –ê–º–µ—Ä–∏–∫–∞": "—Å–ø—Ä–∞–≤–∂–Ω—ñ–π",
      –ú–µ—Å–Ω–∏–∫–∏: "—Å–ø—Ä–∞–≤–∂–Ω—ñ",
      "–í–∞—Ä—Ç–æ–≤—ñ –ì–∞–ª–∞–∫—Ç–∏–∫–∏": "—Å–ø—Ä–∞–≤–∂–Ω—ñ",
      "–ß–æ—Ä–Ω—ñ –ø–∞–Ω—Ç–µ—Ä–∏": "—Å–ø—Ä–∞–≤–∂–Ω—ñ",
      –¢–æ—Ä: "—Å–ø—Ä–∞–≤–∂–Ω—ñ–π",
      "Speider-man": "—Å–ø—Ä–∞–≤–∂–Ω—ñ–π",
      –ú–∞—Ä–≤–µ–ª: "—Å–ø—Ä–∞–≤–∂–Ω—ñ–π",
      –•–∞–ª–∫: "—Å–ø—Ä–∞–≤–∂–Ω—ñ–π",
    };
    const teamAdjective = teamAdjectiveMap[userTeam];

    // –î–∏–Ω–∞–º—ñ—á–Ω–∞ –∑–º—ñ–Ω–∞ –¥—ñ—î—Å–ª—ñ–≤ —Ç–∞ –ø—Ä–∏–∫–º–µ—Ç–Ω–∏–∫—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å—Ç–∞—Ç—ñ –∫–æ–º–∞–Ω–¥–∏
    const conjugatedVerb = isMaleTeam ? "–≤–∏—Å—Ç–æ—è–≤" : "–≤–∏—Å—Ç–æ—è–ª–∞";
    const conjugatedWorthy = isMaleTeam ? "–≥—ñ–¥–Ω–∏–π" : "–≥—ñ–¥–Ω–∞";

    visionSection.innerHTML = `
      <div class="vision-content">
        <img src="images/vision.png" alt="–í—ñ–∂–µ–Ω" class="vision-image">
        <div class="vision-text">
          <h2 class="vision-title">${userName}, —Ç–∏ ${conjugatedVerb}, —è–∫ ${teamAdjective} ${userTeam}!</h2>
          <p>–¢–≤—ñ–π —Ä–æ–∑—É–º —á–∏—Å—Ç–∏–π, —è–∫ –∫–∞–º—ñ–Ω—å –†–æ–∑—É–º—É, —ñ —Ç–∏ ${conjugatedWorthy} —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞–π—Å–∏–ª—å–Ω—ñ—à—É —à–∞—É—Ä–º—É —É –≤—Å–µ—Å–≤—ñ—Ç—ñ!</p>
          <button id="show-recipe-btn" class="vision-button">–û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ—Ü–µ–ø—Ç</button>
        </div>
      </div>
    `;

    mainSection.insertBefore(visionSection, document.getElementById("recipe-section"));

    setTimeout(() => {
      visionSection.classList.remove("hidden");
      visionSection.classList.add("show");
      visionSection.scrollIntoView({ behavior: "smooth", block: "start" });
    }, 500);

    const showRecipeBtn = document.getElementById("show-recipe-btn");
    showRecipeBtn.addEventListener("click", showRecipe);
  }

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ—Ü–µ–ø—Ç—É
  function showRecipe() {
    const recipeSection = document.getElementById("recipe-section");
    const recipeStepsContainer = document.getElementById("recipe-steps");

    if (recipeStepsContainer.children.length > 0) {
      return;
    }

    recipeSection.classList.remove("hidden");
    recipeSection.style.scrollBehavior = "smooth";
    recipeSection.scrollIntoView({ behavior: "smooth", block: "start" });

    const music = document.getElementById("avengersMusic");
    music.play().catch(e => console.error("Music playback failed", e));

    const userName = localStorage.getItem("userName");
    const isMaleTeam = localStorage.getItem("isMaleTeam") === "true";
    const conjugatedFinalVerb = isMaleTeam ? "–∑–º—ñ–≥" : "–∑–º–æ–≥–ª–∞";
    const conjugatedFinalAdjective = isMaleTeam ? "–≥–æ—Ç–æ–≤–∏–π" : "–≥–æ—Ç–æ–≤–∞";

    const recipeTitle = document.querySelector(".recipe-title");
    recipeTitle.textContent = `${userName}, —Ü–µ —Ç–≤—ñ–π —Ä–µ—Ü–µ–ø—Ç –®–∞—É—Ä–º–∏ "–ú–µ—Å–Ω–∏–∫–∏ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è"!`;

    const recipeStepsData = [
      {
        hero: "–ö–∞–ø—ñ—Ç–∞–Ω –ê–º–µ—Ä–∏–∫–∞ üõ°Ô∏è",
        text: "<b>–õ–∞–≤–∞—à (1 —à—Ç)</b> ‚Äî —Ç—Ä–∏–º–∞—î –≤—Å–µ —Ä–∞–∑–æ–º, —è–∫ –π–æ–≥–æ —â–∏—Ç. <br><b>–ö–∞–ø—É—Å—Ç–∞ –ø–µ–∫—ñ–Ω—Å—å–∫–∞ (20 –≥)</b> —ñ <b>–°–∞–ª–∞—Ç –ê–π–∑–±–µ—Ä–≥ (20 –≥)</b> ‚Äî –∑–µ–ª–µ–Ω–∞ ¬´—Å–≤—ñ–∂—ñ—Å—Ç—å —ñ –ø–æ—Ä—è–¥–æ–∫¬ª. <br><b>–°—ñ–ª—å (1,5 –≥)</b> ‚Äî –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞ –π –±–∞–ª–∞–Ω—Å.",
        image: "images/captain-america.png",
        imageRight: false,
      },
      {
        hero: "–•–∞–ª–∫ üíö",
        text: "<b>–ö—É—Ä–∫–∞ (100 –≥)</b> ‚Äî —Å–∏–ª–∞ —Ç–∞ –º—ñ—Ü—å. <br><b>–û–≥—ñ—Ä–æ–∫ (35 –≥)</b> ‚Äî —Ö—Ä—É–º–∫–∞ ¬´—Å–≤—ñ–∂—ñ—Å—Ç—å —Å–∏–ª–∏¬ª.",
        image: "images/hulk.png",
        imageRight: true,
      },
      {
        hero: "–¢–æ—Ä ‚ö°",
        text: "<b>–ë—ñ–ª–∏–π —Å–æ—É—Å (–ø—Ä–∏–±–ª–∏–∑–Ω–æ 45 –≥)</b> ‚Äî –≥—É—Å—Ç–∏–π, —è–∫ –≥—Ä—ñ–º —É –Ω–µ–±—ñ, —ñ —Ç—Ä–∏–º–∞—î –≤—Å–µ –≤ –∫—É–ø—ñ. <br><b>–õ–∏–º–æ–Ω (1 –≥ —Å–æ–∫—É)</b> ‚Äî –π–æ–≥–æ –±–ª–∏—Å–∫–∞–≤–∫–∞ –æ—Å–≤—ñ–∂–∞—î —Å–º–∞–∫.",
        image: "images/thor.png",
        imageRight: false,
      },
      {
        hero: "–ó–∞–ª—ñ–∑–Ω–∞ –õ—é–¥–∏–Ω–∞ üî¥",
        text: "<b>–ü–æ–º—ñ–¥–æ—Ä (48 –≥)</b> ‚Äî —á–µ—Ä–≤–æ–Ω–∏–π —ñ —Å–æ–∫–æ–≤–∏—Ç–∏–π, —è–∫ –π–æ–≥–æ –±—Ä–æ–Ω—è. <br><b>–ö–µ—Ç—á—É–ø (15 –≥)</b> ‚Äî —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω–∏–π –≤–∏–±—É—Ö —Å–º–∞–∫—É.",
        image: "images/iron-man.png",
        imageRight: true,
      },
      {
        hero: "–õ—é–¥–∏–Ω–∞-–ü–∞–≤—É–∫ üï∑Ô∏è",
        text: "<b>–ú–æ—Ä–∫–≤–∞ –ø–æ-–∫–æ—Ä–µ–π—Å—å–∫–∏ (30 –≥)</b> ‚Äî —Ç–æ–Ω–µ–Ω—å–∫—ñ —Å–º—É–∂–∫–∏, —è–∫ –π–æ–≥–æ –ø–∞–≤—É—Ç–∏–Ω–∞. <br><b>–°–∏—Ä —Ç–≤–µ—Ä–¥–∏–π (15 –≥)</b> ‚Äî ¬´—Å–∫–ª–µ—é—î¬ª –≤—Å–µ —Ä–∞–∑–æ–º, —è–∫ –ø–∞–≤—É—Ç–∏–Ω–Ω—è.",
        image: "images/spiderman.png",
        imageRight: false,
      },
      {
        hero: "–ß–æ—Ä–Ω–∞ –ü–∞–Ω—Ç–µ—Ä–∞ üêæ",
        text: "<b>–ü–µ—Ä–µ—Ü—å —Å–æ–ª–æ–¥–∫–∏–π (25 –≥)</b> ‚Äî —è—Å–∫—Ä–∞–≤–∏–π —ñ —à–≤–∏–¥–∫–∏–π, —è–∫ –π–æ–≥–æ —Ä—É—Ö–∏. <br><b>–ó–µ–ª–µ–Ω—å —É–∫—Ä–æ–ø—É (1 –≥)</b> ‚Äî —Å–≤—ñ–∂–∞, –º–æ–≤ –¥–∏–∫–∞ –ø—Ä–∏—Ä–æ–¥–∞ –í–∞–∫–∞–Ω–¥–∏.",
        image: "images/black-panther.png",
        imageRight: true,
      },
      {
        hero: "–°–∫—Ä—É—á—É—î–º–æ —Ä–æ–ª üí™",
        text: "–©–∏—Ç, –º—ñ—Ü—å, –≥—Ä—ñ–º, –ø–∞–≤—É—Ç–∏–Ω–∞, –±—Ä–æ–Ω—è —Ç–∞ —Å–∏–ª–∞ –í–∞–∫–∞–Ω–¥–∏ —Ç–µ–ø–µ—Ä —Ä–∞–∑–æ–º! –û–±–µ—Ä–µ–∂–Ω–æ –∑–≥–æ—Ä–Ω–∏ –ª–∞–≤–∞—à, —Ñ—ñ–∫—Å—É—é—á–∏ –Ω–∞—á–∏–Ω–∫—É –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ, —è–∫ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π –ö–∞–ø—ñ—Ç–∞–Ω –ê–º–µ—Ä–∏–∫–∞, —â–æ —É—Ç—Ä–∏–º—É—î –≤—Å–µ—Å–≤—ñ—Ç —Ä–∞–∑–æ–º.",
        image: "images/captain-america-roll.png",
        imageRight: false,
      },
      {
        hero: "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è",
        image: "images/shawarma.png",
        text: `–ü–µ—Ä–µ–º–æ–≥–∞ –Ω–∞–¥ –≥–æ–ª–æ–¥–æ–º! <br>–°–º–∞—á–Ω–æ–≥–æ, ${userName}! –¢–∏ ‚Äî —Å–ø—Ä–∞–≤–∂–Ω—ñ–π –ú–µ—Å–Ω–∏–∫, –∞–¥–∂–µ ${conjugatedFinalVerb} –ø–æ—î–¥–Ω–∞—Ç–∏ –≥–µ—Ä–æ—ó—á–Ω—É —Å–∏–ª—É, –º—É–¥—Ä—ñ—Å—Ç—å —Ç–∞ –≤—ñ–¥–≤–∞–≥—É, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ü—é –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—É —à–∞—É—Ä–º—É. –¢–µ–ø–µ—Ä —Ç–∏ ${conjugatedFinalAdjective} –¥–æ –±—É–¥—å-—è–∫–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤, –Ω–∞–≤—ñ—Ç—å –¥–æ –Ω–∞–π–≥–æ–ª–æ–¥–Ω—ñ—à–∏—Ö!`,
        isFinal: true,
      },
    ];

    recipeStepsData.forEach(step => {
      const stepDiv = document.createElement("div");
      stepDiv.classList.add("recipe-step");
      if (step.imageRight) {
        stepDiv.classList.add("right");
      }
      if (step.isFinal) {
        stepDiv.classList.add("final-step");
        stepDiv.innerHTML = `
          <div class="final-step-image">
            <img src="${step.image}" alt="–ó–∞–≤–µ—Ä—à–∞–ª—å–Ω–∏–π –∫—Ä–æ–∫">
          </div>
          <div class="final-message">${step.text}</div>
        `;
      } else {
        stepDiv.innerHTML = `
          <div class="recipe-step-image">
            <img src="${step.image}" alt="${step.hero}">
          </div>
          <div class="recipe-step-text">
            <h3>${step.hero}</h3>
            <p>${step.text}</p>
          </div>
        `;
      }
      recipeStepsContainer.appendChild(stepDiv);
    });

    const observer = new IntersectionObserver(
      (entries, observer) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add("show");
            observer.unobserve(entry.target);
          }
        });
      },
      { threshold: 0.5 }
    );

    document.querySelectorAll(".recipe-step").forEach(step => {
      observer.observe(step);
    });
  }

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–µ–∫—Ü—ñ—ó –¢–∞–Ω–æ—Å–∞
  function showThanos() {
    const mainSection = document.querySelector("main");
    const userName = localStorage.getItem("userName");
    const leaderName = localStorage.getItem("leaderName");
    const isMaleTeam = localStorage.getItem("isMaleTeam") === "true";
    const conjugatedVerb = isMaleTeam ? "–¥–æ–ø—É—Å—Ç–∏–≤" : "–¥–æ–ø—É—Å—Ç–∏–ª–∞";

    mainSection.innerHTML = `
      <section id="thanos-section" class="thanos-section">
        <h2 class="thanos-title">–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –ø–æ–º–∏–ª–æ–∫...</h2>
        <div class="thanos-content">
          <img src="images/thanos-gauntlet.png" alt="–¢–∞–Ω–æ—Å –∑ —Ä—É–∫–∞–≤–∏—Ü–µ—é –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–æ—Å—Ç—ñ" class="thanos-image">
          <p class="thanos-message">${userName}, —Ç–∏ ${conjugatedVerb} –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏! –©–æ –∂ –ø–æ–¥—É–º–∞—î –ø—Ä–æ —Ç–µ–±–µ —Ç–≤—ñ–π –ª—ñ–¥–µ—Ä, ${leaderName}?</p>
          <button id="snap-button" class="snap-button">
            <span class="button-text">–©–µ–ª–∫–Ω—É—Ç–∏ "–†—É–∫–∞–≤–∏—Ü–µ—é –ù–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–æ—Å—Ç—ñ"</span>
          </button>
        </div>
      </section>
    `;

    const snapButton = document.getElementById("snap-button");
    snapButton.addEventListener("click", () => {
      showThanosSnapAnimation();
    });
  }

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó –∫–ª–∞—Ü–∞–Ω–Ω—è –¢–∞–Ω–æ—Å–∞ —Ç–∞ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
  function showThanosSnapAnimation() {
    const thanosImage = document.querySelector(".thanos-image");
    const snapButton = document.getElementById("snap-button");
    snapButton.style.display = "none";
    thanosImage.src = "images/thanos-snap.png";
    thanosImage.classList.add("snap-animation");

    setTimeout(() => {
      const flash = document.createElement("div");
      flash.classList.add("white-flash-overlay");
      document.body.appendChild(flash);

      setTimeout(() => {
        location.reload();
      }, 2000);
    }, 1500);
  }
});
